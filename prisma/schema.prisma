generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(cuid())
  name            String
  email           String                @unique
  password        String
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  checkpoints     Checkpoint[]
  assignments     UserPlaceAssignment[]
  journeyLocations JourneyLocation[]

  @@map("users")
}

model Place {
  id          String                @id @default(cuid())
  name        String
  address     String
  latitude    Float
  longitude   Float
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  checkpoints Checkpoint[]
  assignments UserPlaceAssignment[]

  @@map("places")
}

model UserPlaceAssignment {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  createdAt DateTime @default(now())
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
  @@map("user_place_assignments")
}

model Checkpoint {
  id              String            @id @default(cuid())
  userId          String
  placeId         String?
  placeName       String
  latitude        Float
  longitude       Float
  timestamp       DateTime
  notes           String?
  imageUrl        String?
  type            CheckpointType    @default(MANUAL)
  createdAt       DateTime          @default(now())
  place           Place?            @relation(fields: [placeId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  journeyLocations JourneyLocation[]

  @@map("checkpoints")
}

model JourneyLocation {
  id              String     @id @default(cuid())
  userId          String
  startCheckpointId String   // Referencia al checkpoint de inicio de jornada
  latitude        Float
  longitude       Float
  recordedAt      DateTime
  createdAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [id])
  startCheckpoint Checkpoint @relation(fields: [startCheckpointId], references: [id], onDelete: Cascade)

  @@map("journey_locations")
}

enum CheckpointType {
  MANUAL
  JOURNEY_START
  JOURNEY_END
}
