generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String                @id @default(cuid())
  name        String
  email       String                @unique
  password    String
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  checkpoints Checkpoint[]
  assignments UserPlaceAssignment[]
  journeys    Journey[]

  @@map("users")
}

model Place {
  id          String                @id @default(cuid())
  name        String
  address     String
  latitude    Float
  longitude   Float
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  checkpoints Checkpoint[]
  assignments UserPlaceAssignment[]
  journeys    Journey[]

  @@map("places")
}

model UserPlaceAssignment {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  createdAt DateTime @default(now())
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
  @@map("user_place_assignments")
}

model Checkpoint {
  id        String            @id @default(cuid())
  userId    String
  placeId   String?
  placeName String
  latitude  Float
  longitude Float
  timestamp DateTime
  notes     String?
  imageUrl  String?
  type      CheckpointType    @default(MANUAL)
  journeyId String?
  createdAt DateTime          @default(now())
  place     Place?            @relation(fields: [placeId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  journey   Journey?          @relation(fields: [journeyId], references: [id])

  @@map("checkpoints")
}

model Journey {
  id            String            @id @default(cuid())
  userId        String
  placeId       String?
  placeName     String
  startLatitude Float
  startLongitude Float
  endLatitude   Float?
  endLongitude  Float?
  startedAt     DateTime
  endedAt       DateTime?
  durationMinutes Int?
  status        JourneyStatus     @default(ACTIVE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id])
  place         Place?            @relation(fields: [placeId], references: [id])
  locations     JourneyLocation[]
  checkpoints   Checkpoint[]

  @@map("journeys")
}

model JourneyLocation {
  id         String   @id @default(cuid())
  journeyId  String
  latitude   Float
  longitude  Float
  recordedAt DateTime
  createdAt  DateTime @default(now())
  journey    Journey  @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@map("journey_locations")
}

enum CheckpointType {
  MANUAL
  JOURNEY_START
  JOURNEY_UPDATE
  JOURNEY_END
}

enum JourneyStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
